---
title: "Project title"
subtitle: "INFO 526 - Project 1"
author: "Team name"
format: html
editor: visual
---

## Abstract

Add project abstract here.

## Setup
```{r}
if(!require(pacman))
  install.packages("pacman") #utilize pacman to load each package, while ensuring nothing is redownloaded unnecesarily
options(timeout = 1200) #sf takes forever to download so we have to increase the timeout time

pacman::p_load(tidyverse, #Add new packages as necessary
               here,
               devtools,
               dlookr,
               dplyr,
               usmap,
               sf,
               ggrepel)


```
Add new sections as necessary [DELETE BEFORE TURNING IN]

## EDA
```{r}
elec <- readr::read_csv('data/house.csv')
describe(elec)
elec16to20 <- elec |>
  filter(between(year,2016,2020))  #filter years to between 2016 and 2020

#ggplot(elec) |> #create a plot to show change house elections from entire dataset

```

## Data Wrangling
```{r}

 
for (date in c(2016, #aggregate state mode of party to determine which party has the 
               2018, #majority
               2020)) {
  result <- elec16to20 |>
    filter(year == date) |>
    group_by(state) |>
    summarize(winnerByHouseMajority = names(which.max(table(party))))
  assign(paste0('partyMaj', 
                date), 
         result)
}
  
for(date in c(2016,2018,2020)) { #for each state determine which party got the most votes
  result <- elec16to20 |>
    filter(year == date) |>
    group_by(state) |>
    summarize(winnerByTotalVotes = party[which.max(candidatevotes)], 
              partyVotes = sum(candidatevotes)) |>
    mutate(fips = fips(state)) #necessary for plotting on US map
  assign(paste0('genMaj',
                date), 
         result)
}

data2016 <- merge(genMaj2016,partyMaj2016)
data2018 <- merge(genMaj2018, partyMaj2018)
data2020 <- merge(genMaj2020, partyMaj2020)



```


## Data Visualization
```{r}
#general plot just to get used to the function. We can add layers like a ggplot object
#For Question 1 we want three maps of the US where each state is colored based on the winning party, then also a number for each state corresponding to the party that had the most votes


plot_usmap(data = data2016, values = "winnerByHouseMajority", labels = TRUE)



```


